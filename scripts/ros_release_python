#!/usr/bin/env python

from __future__ import print_function

import argparse
try:
    from configparser import DEFAULTSECT
    from configparser import RawConfigParser
except ImportError:
    from ConfigParser import DEFAULTSECT
    from ConfigParser import RawConfigParser
import os
import shutil
import subprocess
import sys


def get_name_and_version():
    _print_section('Determine package name and version')
    output = subprocess.check_output(['python3', 'setup.py', '--name', '--version'])
    lines = output.splitlines()
    assert len(lines) == 2
    name = lines[0].decode('ascii')
    version = lines[1].decode('ascii')
    print('Package: %s' % name)
    print('Version: %s' % version)
    return name, version


def release_to_pip(name, version, upload):
    _print_section('Release Python package to PIP')

    _print_subsection('Building sdist and bdist_wheel packages...')
    cmd = ['python3', 'setup.py', 'sdist', 'bdist_wheel']
    print('# ' + ' '.join(cmd))
    subprocess.check_call(cmd)

    tarball = 'dist/%s-%s.tar.gz' % (name, version)
    assert os.path.exists(tarball), "Failed to generate source tarball '%s'" % tarball

    upload_cmd = ['twine', 'upload', '-s', 'dist/*']
    if upload:
        _print_subsection('Uploading package to PIP...')
    else:
        _print_subsection('Skip uploading package to PIP')
    print('# ' + ' '.join(upload_cmd))
    if upload:
        subprocess.check_call(upload_cmd)


def release_to_debian(name, version, debian_version, upload, ignore_upload_error, python_version, setup_env_vars=None):
    _print_section('Release Python %d package to apt repository' % python_version)

    source_pkg_name = 'python%s-%s' % ('' if python_version == 2 else str(python_version), name)
    source_pkg_name = source_pkg_name.replace('_', '-')

    if python_version == 2:
        other_python_version = 3
    else:
        other_python_version = 2

    try:
        _print_subsection('Building sdist_dsc and bdist_deb package...')
        cmd = ['python%d' % python_version, 'setup.py',
               '--command-packages=stdeb.command',
               'sdist_dsc', '--source', source_pkg_name,
               '--with-python%d' % python_version, 'true',
               '--with-python%d' % other_python_version, 'false',
               '--force-x-python3-version',
               '--debian-version', debian_version,
               'bdist_deb']

        add_env = {}
        if setup_env_vars:
            for env_var in setup_env_vars.split(' '):
                key, value = env_var.split('=', 1)
                add_env[key] = value

        print(
            '# ' + ' '.join(cmd) +
            (' [with %s]' % ' '.join(['%s=%s' % (k, v) for k, v in add_env.items()])
             if add_env else ''))
        subprocess.check_call(cmd, env=dict(os.environ, **add_env))
    finally:
        tarball = '%s-%s.tar.gz' % (name, version)
        if os.path.isfile(tarball):
            os.unlink(tarball)

    dput_path = _get_config_path('dput.cf')

    config = RawConfigParser()
    config.read(dput_path)
    cmds = []

    # upload source (.dsc and so on)
    for apt_repo in config.sections():
        changes_file = 'deb_dist/%s_%s-%s_source.changes' % (source_pkg_name, version, debian_version)
        assert os.path.exists(changes_file), "Failed to generate source changes file '%s'" % changes_file
        strip_buildinfo(changes_file)
        cmds.append(['dput', '-u', '-c', dput_path, apt_repo, changes_file])

    # upload binary (.deb) packages
    for apt_repo in config.sections():
        changes_file = 'deb_dist/%s_%s-%s_amd64.changes' % (source_pkg_name, version, debian_version)
        assert os.path.exists(changes_file), "Failed to generate binary changes file '%s'" % changes_file
        strip_buildinfo(changes_file)
        cmds.append(['dput', '-u', '-c', dput_path, apt_repo, changes_file])

    if upload:
        _print_subsection('Uploading package to apt repositories...')
    else:
        _print_subsection('Skip uploading package to apt repositories')
    for cmd in cmds:
        print('# ' + ' '.join(cmd))
        if upload:
            try:
                subprocess.check_call(cmd)
            except subprocess.CalledProcessError:
                if not ignore_upload_error:
                    raise


def strip_buildinfo(path):
    with open(path, 'r') as h:
        content = h.read()
    lines = content.splitlines()
    with open(path, 'w') as h:
        for line in lines:
            if line.startswith(' ') and line.endswith('.buildinfo'):
                print(
                    'Removing .buildinfo from changes file [%s] for older reprepro compatibility. '
                    'https://github.com/ros-infrastructure/ros_release_python/pull/22' % path)
                continue
            h.write(line + '\n')


def clean_all(names):
    subfolders = ['build', 'deb_dist', 'dist']
    for name in names:
        subfolders += ['%s.egg-info' % name, 'src/%s.egg-info' % name]
        if '-' in name:
            subfolders += ['%s.egg-info' % name.replace('-', '_')]
    remove_trees(subfolders)


def clean_other_debian_sources(other_names, version, python_version):
    subfolders = []
    for name in other_names:
        folder_name = 'python%s-%s-%s' % \
            ('' if python_version == 2 else str(python_version), name.replace('_', '-'), version)
        subfolders.append('deb_dist/' + folder_name)
    remove_trees(subfolders)


def remove_trees(subfolders):
    for subfolder in subfolders:
        if os.path.exists(subfolder):
            _print_subsection("Deleting subfolder '%s'..." % subfolder)
            shutil.rmtree(subfolder)


def include(name, version, debian_version, upload, python_version):
    config = RawConfigParser()
    config.read('stdeb.cfg')
    section = name if name in config.sections() else DEFAULTSECT
    if python_version == 3 and config.has_option(section, 'Suite3'):
        suites = config.get(section, 'Suite3').split(' ')
    else:
        suites = config.get(section, 'Suite').split(' ')

    name = name.replace('_', '-')

    option_name = 'Package%s' % ('' if python_version == 2 else str(python_version))
    if config.has_option(section, option_name):
        pkg_name = config.get(section, option_name)
    else:
        pkg_name = 'python%s-%s' % ('' if python_version == 2 else str(python_version), name)

    include_path = _get_config_path('include.cf')

    config = RawConfigParser()
    config.read(include_path)
    cmds = []
    for apt_repo in config.sections():
        basepath = config.get(apt_repo, 'basepath')
        includedsc_command = config.get(apt_repo, 'includedsc_command')
        includedeb_command = config.get(apt_repo, 'includedeb_command')
        for suite in suites:
            cmd = includedsc_command.split(' ')
            cmd.append(suite)
            cmd.append('%s/pool/main/%s/%s/%s_%s-%s.dsc' % (basepath, pkg_name[0], pkg_name, pkg_name, version, debian_version))
            cmds.append(cmd)
            cmd = includedeb_command.split(' ')
            cmd.append(suite)
            cmd.append('%s/pool/main/%s/%s/%s_%s-%s_all.deb' % (basepath, pkg_name[0], pkg_name, pkg_name, version, debian_version))
            cmds.append(cmd)

    _print_subsection('Propagate Debian package to listed suites...')
    for cmd in cmds:
        print('# ' + ' '.join(cmd))
        if upload:
            try:
                subprocess.check_call(cmd)
            except subprocess.CalledProcessError:
                pass


def _get_config_path(basename):
    if os.path.exists(basename):
        print("Using existing '%s' file" % basename)
        return basename
    else:
        return os.path.join(os.path.dirname(os.path.dirname(__file__)), 'resources', basename)


def _print_section(msg):
    print('\n== %s' % msg)


def _print_subsection(msg):
    print('\n-- %s' % msg)


def _run_command(cmd):
    subprocess.check_call


class TargetAction(argparse.Action):
    CHOICES = ['deb2', 'deb3', 'pip']

    def __call__(self, parser, namespace, values, option_string=None):
        if values:
            for value in values:
                if value not in self.CHOICES:
                    raise argparse.ArgumentError(
                        self, 'invalid choice: %s (choose from: %s)' % (value, ', '.join(self.CHOICES)))
            if len(values) > len(set(values)):
                raise argparse.ArgumentError(
                    self, 'non-unique choice: %s (choose from: %s)' % (', '.join(values), ', '.join(self.CHOICES)))
            setattr(namespace, self.dest, values)


def main(argv=sys.argv[1:]):
    (pkg_name, version) = get_name_and_version()

    config = RawConfigParser()
    config.read('stdeb.cfg')
    sections = config.sections()
    if sections:
        names = sections
    else:
        names = [pkg_name]
        sections = [DEFAULTSECT]

    # remove target choices if the package doesn't support them
    for section in sections:
        for version in ('2', '3'):
            if config.has_option(section, 'No-Python' + version):
                try:
                    TargetAction.CHOICES.remove('deb' + version)
                    print('Skipping Python ' + version)
                except ValueError:
                    pass

    parser = argparse.ArgumentParser(
        description='Release a Python package into PIP as well as the ROS apt repositories.')

    parser.add_argument('targets', nargs='*', action=TargetAction, default=TargetAction.CHOICES, metavar='TARGET',
                        help='The list of targets to release to (default: %s).' % ' '.join(TargetAction.CHOICES))

    parser.add_argument('--clean', action='store_true', default=False,
                        help="Delete all generated subfolders (ignores all targets).")
    parser.add_argument('--debug', action='store_true', default=False,
                        help='Print stacktrace to stderr in case of errors.')
    parser.add_argument('--upload', action='store_true', default=False,
                        help='Perform actual upload / include steps')
    parser.add_argument('--ignore-upload-error', action='store_true', default=False,
                        help='Continue on upload errors (only for Debian release targets)')
    parser.add_argument('--include', action='store_true', default=False,
                        help='Copy already released and uploaded Debian packages version into new list of suites')
    parser.add_argument('--debian-version',
                        help="The debian version suffix (default: '1' if not specified in 'stdeb.cfg')")

    args = parser.parse_args(argv)

    try:
        while True:
            if args.clean:
                clean_all(names)
                break

            for target in args.targets:
                if target not in ['deb2', 'deb3']:
                    continue
                python_version = int(target[-1])
                if not args.include:
                    clean_all(names)

                for name, section in zip(names, sections):
                    debian_version = '1'
                    if args.debian_version is not None:
                        debian_version = args.debian_version
                    if config.has_option(section, 'Debian-Version'):
                        debian_version = config.get(section, 'Debian-Version')

                    if not args.include:
                        # remove other sources from deb_dist folder
                        # otherwise bdist_deb is unsure about the source dir
                        clean_other_debian_sources(set(names) - set([name]), version, python_version)
                        setup_env_vars = None
                        if config.has_option(section, 'Setup-Env-Vars'):
                            setup_env_vars = config.get(section, 'Setup-Env-Vars')
                        release_to_debian(
                            name, version, debian_version, args.upload,
                            args.ignore_upload_error, python_version,
                            setup_env_vars=setup_env_vars)
                    else:
                        include(name, version, debian_version, args.upload, python_version)

            if not args.include and 'pip' in args.targets:
                release_to_pip(pkg_name, version, args.upload)

            break  # while True

    except subprocess.CalledProcessError as e:
        print('\nCommand [%s] returned non-zero exit status %d' % (' '.join(e.cmd), e.returncode), file=sys.stderr)
        return 1
    except Exception as e:
        if args.debug:
            print()
            raise
        if str(e):
            print('\n' + str(e), file=sys.stderr)
        else:
            print('\n' + type(e).__name__, file=sys.stderr)
        return 1
    return 0


if __name__ == '__main__':
    rc = main()
    sys.exit(rc)
